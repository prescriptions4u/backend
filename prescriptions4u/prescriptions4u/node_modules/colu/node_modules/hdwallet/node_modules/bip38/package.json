{
  "name": "bip38",
  "version": "1.4.0",
  "description": "BIP38 is a standard process to encrypt Bitcoin and crypto currency private keys that is impervious to brute force attacks thus protecting the user.",
  "main": "index.js",
  "keywords": [
    "bitcoin",
    "crypto",
    "cryptography",
    "litecoin"
  ],
  "homepage": "http://cryptocoinjs.com/modules/currency/bip38/",
  "author": {
    "name": "JP Richardson"
  },
  "dependencies": {
    "bigi": "^1.2.0",
    "browserify-aes": "^1.0.1",
    "buffer-xor": "^1.0.2",
    "coinstring": "^2.2.0",
    "create-hash": "^1.1.1",
    "ecurve": "^1.0.0",
    "scryptsy": "^1.2.0"
  },
  "devDependencies": {
    "coveralls": "^2.10.0",
    "istanbul": "^0.2.11",
    "mocha": "^2.3.3",
    "mochify": "^2.1.1",
    "standard": "^5.0.2"
  },
  "repository": {
    "url": "git@github.com:cryptocoinjs/bip38.git",
    "type": "git"
  },
  "scripts": {
    "browser-test": "mochify --wd -R spec --timeout 100000",
    "coverage": "istanbul cover _mocha -- --reporter list test/*.js",
    "coveralls": "npm run-script coverage && coveralls < coverage/lcov.info",
    "standard": "standard",
    "test": "npm run standard && npm run unit",
    "unit": "mocha --ui bdd --timeout 240000"
  },
  "readme": "bip38\n=====\n\n[![build status](https://secure.travis-ci.org/bitcoinjs/bip38.svg)](http://travis-ci.org/bitcoinjs/bip38)\n[![Coverage Status](https://img.shields.io/coveralls/cryptocoinjs/bip38.svg)](https://coveralls.io/r/cryptocoinjs/bip38)\n[![Version](http://img.shields.io/npm/v/bip38.svg)](https://www.npmjs.org/package/bip38)\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\nA JavaScript component that adheres to the [BIP38](https://github.com/bitcoin/bips/blob/master/bip-0038.mediawiki) standard to secure your crypto currency private keys. Fully compliant with Node.js and the browser (via Browserify).\n\n\nWhy?\n----\n\nBIP38 is a standard process to encrypt Bitcoin and crypto currency private keys that is imprevious to brute force attacks thus protecting the user.\n\n\nPackage Info\n------------\n- homepage: [http://cryptocoinjs.com/modules/currency/bip38/](http://cryptocoinjs.com/modules/currency/bip38/)\n- github: [https://github.com/cryptocoinjs/bip38](https://github.com/cryptocoinjs/bip38)\n- tests: [https://github.com/cryptocoinjs/bip38/tree/master/test](https://github.com/cryptocoinjs/bip38/tree/master/test)\n- issues: [https://github.com/cryptocoinjs/bip38/issues](https://github.com/cryptocoinjs/bip38/issues)\n- license: **MIT**\n- versioning: [http://semver-ftw.org](http://semver-ftw.org)\n\n\nUsage\n-----\n\n### Installation\n\n    npm install --save bip38\n\n\nAPI\n---\n\n### Bip38([versions])\n\nConstructor that creates a new `Bip38` instance. \n\n- **versions**: optional parameter to set the versions. Defaults to Bitcoin.\n\n\n### versions\n\nA field that accepts an object for the address version. This easily allows you to support altcoins. Defaults to Bitcoin values.\n\n\n**example:**\n\n```js\nvar Bip38 = require('bip38')\n\nvar privateKeyWif = '5KN7MzqK5wt2TP1fQCYyHBtDrXdJuXbUzm4A9rKAteGu3Qi5CVR'\n\nvar bip38 = new Bip38()\n\n// not necessary, as Bitcoin is supported by default\nbip38.versions = {\n\tprivate: 0x80, \n  public: 0x0\n}\nbip38.encrypt(privateKeyWif, \"super-secret\", \"1Jq6MksXQVWzrznvZzxkV6oY57oWXD9TXB\"})\n```\n\n### scryptParams\n\nA field that accepts an object with the follow properties: `N`, `r`, and `p` to control the [scrypt](https://github.com/cryptocoinjs/scryptsy). The\nBIP38 standard suggests `N = 16384`, `r = 8`, and `p = 8`. However, this may yield unacceptable performance on a mobile phone. If you alter these parameters, it wouldn't be wise to suggest to your users that your import/export encrypted keys are BIP38 compatible. If you do, you may want to alert them of your parameter changes.\n\n**example:**\n\n```js\nbip38.scryptParams = {\n  N: 8192, \n  r: 8, \n  p: 8\n}\n```\n\n\n### encrypt(wif, passphrase, address, progressCallback)\n\nA method that encrypts the private key. `wif` is the string value of the wallet import format key. `passphrase` the passphrase to encrypt the key with. `address` is the public address.\n`progressCallback` is a function that receives an object in the form of: \n{current: 1000, total: 262144, percent: 0.3814697265625}\n\n\nReturns the encrypted string.\n\n**example**:\n\n```js\nvar Bip38 = require('bip38')\n\nvar privateKeyWif = '5KN7MzqK5wt2TP1fQCYyHBtDrXdJuXbUzm4A9rKAteGu3Qi5CVR'\n\nvar bip38 = new Bip38()\nvar encrypted = bip38.encrypt(privateKeyWif, 'TestingOneTwoThree', \"1Jq6MksXQVWzrznvZzxkV6oY57oWXD9TXB\", function (status) {\n    console.log(status.percent) // Will print the precent every time current increases by 1000\n})\nconsole.log(encrypted) \n// => 6PRVWUbkzzsbcVac2qwfssoUJAN1Xhrg6bNk8J7Nzm5H7kxEbn2Nh2ZoGg\n```\n\n\n### decrypt(encryptedKey, passhprase, progressCallback)\n\nA method that decrypts the encrypted string. `encryptedKey` is the string value of the encrypted key. `passphrase` is the passphrase to decrypt the key with.\n`progressCallback` is a function that receives an object in the form of: \n{current: 1000, total: 262144, percent: 0.3814697265625}\n\n\n```js\nvar Bip38 = require('bip38')\n\nvar encryptedKey = '6PRVWUbkzzsbcVac2qwfssoUJAN1Xhrg6bNk8J7Nzm5H7kxEbn2Nh2ZoGg'\n\nvar bip38 = new Bip38()\nvar privateKeyWif = bip38.decrypt(encryptedKey, 'TestingOneTwoThree', function (status) {\n    console.log(status.percent) // Will print the precent every time current increases by 1000\n})\nconsole.log(privateKeyWif) \n// =>  '5KN7MzqK5wt2TP1fQCYyHBtDrXdJuXbUzm4A9rKAteGu3Qi5CVR'\n```\n\n**note:** To check for an invalid password, you'll want to generate the public address from the output of the `decrypt()` function. If it doesn't equal the expected address or the address checksum, then chances are, it's an invalid password. The reason that this logic was not included is because it would have required a lot of dependencies: `ECKey` and `Address`. Currently, `ECKey` is pretty heavy on dependencies.\n\n\n\nReferences\n----------\n- https://github.com/bitcoin/bips/blob/master/bip-0038.mediawiki\n- https://github.com/pointbiz/bitaddress.org/issues/56 (Safari 6.05 issue)\n- https://github.com/casascius/Bitcoin-Address-Utility/tree/master/Model\n- https://github.com/nomorecoin/python-bip38-testing/blob/master/bip38.py\n- https://github.com/pointbiz/bitaddress.org/blob/master/src/ninja.key.js \n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cryptocoinjs/bip38/issues"
  },
  "_id": "bip38@1.4.0",
  "dist": {
    "shasum": "6761a88450ff541cc1304d5c4c59d3ed8c4cac40"
  },
  "_from": "bip38@1.4.0",
  "_resolved": "https://registry.npmjs.org/bip38/-/bip38-1.4.0.tgz"
}
